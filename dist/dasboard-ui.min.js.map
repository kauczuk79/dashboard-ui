{"version":3,"sources":["dasboard-ui.min.js"],"names":["angular","module","SvgUtilsFactory","transformAttr","transformOriginAttr","translateString","x","y","scaleString","scale","rotateString","angle","transformOriginString","indicatorOriginX","indicatorOriginY","factory","d3","AnalogGaugeDirective","svgUtils","link","scope","element","attrs","updateGaugeAngle","value","parseInt","minValue","startAngle","maxValue","endAngle","deltaAngle","Math","abs","deltaValue","indicator","style","gaugeGroup","select","indicatorBoundingBox","node","getBBox","width","height","attr","$watch","restrict","$inject","directive","window","BarMeterDirective","EASING_DURATION","EASING","bar","vertical","originalX","originalY","maxPosition","minPosition","stepWidth","barLength","transition","duration","ease","AlphanumericLcdDirective","updateLines","lineNumber","rows","undefined","lines","selectAll","FOREGROUND_CLASS","data","text","d","substring","columns","lineIterator","RECTANGLE_CHAR","BACKGROUND_CLASS","parseFloat","fontHeight","lcdGroup","append","showBackground","arr","length","join","FourteenSegmentDisplayDirective","iterator","digits","background","opacity","template","LedLightDirective","$interval","toggleTurnOn","targetOpacity","icon","toggleBlinking","blinking","on","blinkingTimer","cancel","SevenSegmentDisplayDirective"],"mappings":"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","file":"dasboard-ui.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui', ['ngRoute', 'dashboard-ui.directives']);\r\n} ());\n(function () {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.commons', []);\r\n} ());\n(function () {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tfunction SvgUtilsFactory() {\r\n\t\treturn {\r\n\t\t\ttransformAttr: 'transform',\r\n\t\t\ttransformOriginAttr: 'transform-origin',\r\n\t\t\ttranslateString: function (x, y) {\r\n                return 'translate(' + x + ', ' + y + ')';\r\n            },\r\n            scaleString: function (scale) {\r\n                return 'scale(' + scale + ')';\r\n            },\r\n\t\t\trotateString: function (angle) {\r\n\t\t\t\treturn 'rotate(' + angle + 'deg)';\r\n\t\t\t},\r\n\t\t\ttransformOriginString: function (indicatorOriginX, indicatorOriginY) {\r\n\t\t\t\treturn indicatorOriginX + 'px ' + indicatorOriginY + 'px';\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.commons')\r\n\t\t.factory('svgUtils', SvgUtilsFactory);\r\n} ());\n(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui.directives', ['dashboard-ui.commons']);\r\n} ());\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AnalogGaugeDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var startAngle = parseInt(scope.startAngle, 10),\r\n                maxValue = parseInt(scope.maxValue, 10),\r\n                endAngle = parseInt(scope.endAngle, 10) || (startAngle * -1),\r\n                minValue = parseInt(scope.minValue, 10) || 0,\r\n                gaugeGroup = d3.select(element[0]),\r\n                indicator = gaugeGroup.select('#indicator'),\r\n                indicatorBoundingBox = indicator.node().getBBox(),\r\n                indicatorOriginX = scope.indicatorOriginX || (indicatorBoundingBox.x + (indicatorBoundingBox.width / 2)),\r\n                indicatorOriginY = scope.indicatorOriginY || (indicatorBoundingBox.y + (indicatorBoundingBox.height / 2)),\r\n                angle,\r\n                deltaAngle = 0,\r\n                deltaValue = maxValue - minValue;\r\n\r\n            function updateGaugeAngle() {\r\n                var value = parseInt(scope.value, 10);\r\n                if (value < minValue) {\r\n                    angle = startAngle;\r\n                } else if (value > maxValue) {\r\n                    angle = endAngle;\r\n                } else {\r\n                    deltaAngle = Math.abs(endAngle - startAngle);\r\n                    if (startAngle < endAngle) {\r\n                        //clockwise\r\n                        angle = startAngle + Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    } else {\r\n                        //counter clockwise\r\n                        angle = startAngle - Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    }\r\n                    indicator.style(svgUtils.transformOriginAttr, svgUtils.transformOriginString(indicatorOriginX, indicatorOriginY));\r\n                    indicator.style(svgUtils.transformAttr, svgUtils.rotateString(angle));\r\n                }\r\n            }\r\n            gaugeGroup.attr(svgUtils.transformAttr, svgUtils.translateString(attrs.x, attrs.y));\r\n            scope.$watch('value', function () {\r\n                updateGaugeAngle();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                value: '@',\r\n                startAngle: '@',\r\n                endAngle: '@',\r\n                maxValue: '@',\r\n                minValue: '@',\r\n                indicatorOriginX: '@',\r\n                indicatorOriginY: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    AnalogGaugeDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('analogGauge', AnalogGaugeDirective);\r\n} (window.d3));\n(function (d3) {\r\n\t'use strict';\r\n\t/*global angular, console*/\r\n\r\n\tfunction BarMeterDirective() {\r\n\t\tfunction link(scope, element, attrs) {\r\n\t\t\tvar EASING_DURATION = 250,\r\n\t\t\t\tEASING = 'linear',\r\n\t\t\t\tbar = d3.select(element[0]).select('#bar'),\r\n\t\t\t\tvertical = (scope.vertical === 'true') || false,\r\n\t\t\t\toriginalX = parseInt(bar.attr('x'), 10),\r\n\t\t\t\toriginalY = parseInt(bar.attr('y'), 10),\r\n\t\t\t\tmaxPosition = parseInt(scope.maxPosition, 10),\r\n\t\t\t\tminPosition = parseInt(scope.minPosition, 10),\r\n\t\t\t\tminValue = parseInt(scope.minValue, 10),\r\n\t\t\t\tmaxValue = parseInt(scope.maxValue, 10),\r\n\t\t\t\tstepWidth = ((maxPosition - minPosition) / (maxValue - minValue));\r\n\t\t\tscope.$watch('value', function () {\r\n\t\t\t\tvar value = parseInt(scope.value, 10),\r\n\t\t\t\t\tbarLength = Math.abs(stepWidth * value),\r\n\t\t\t\t\tx,\r\n                    y,\r\n                    height,\r\n                    width;\r\n\t\t\t\tif (vertical) {\r\n\t\t\t\t\tif (value >= 0 && value <= maxValue) {\r\n\t\t\t\t\t\ty = originalY - barLength;\r\n\t\t\t\t\t\theight = barLength;\r\n\t\t\t\t\t} else if (value < 0 && value >= minValue) {\r\n\t\t\t\t\t\ty = originalY;\r\n\t\t\t\t\t\theight = barLength;\r\n\t\t\t\t\t} else if (value > maxValue) {\r\n\t\t\t\t\t\ty = maxPosition;\r\n\t\t\t\t\t\theight = stepWidth * maxValue;\r\n\t\t\t\t\t} else if (value < minValue) {\r\n\t\t\t\t\t\ty = originalY;\r\n\t\t\t\t\t\theight = stepWidth * minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbar.transition().duration(EASING_DURATION).ease(EASING).attr('y', y).attr('height', Math.abs(height));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (value >= 0 && value <= maxValue) {\r\n\t\t\t\t\t\tx = originalX;\r\n\t\t\t\t\t\twidth = barLength;\r\n\t\t\t\t\t} else if (value < 0 && value >= minValue) {\r\n\t\t\t\t\t\tx = originalX - barLength;\r\n\t\t\t\t\t\twidth = barLength;\r\n\t\t\t\t\t} else if (value > maxValue) {\r\n\t\t\t\t\t\tx = originalX;\r\n\t\t\t\t\t\twidth = stepWidth * maxValue;\r\n\t\t\t\t\t} else if (value < minValue) {\r\n\t\t\t\t\t\tx = minPosition;\r\n\t\t\t\t\t\twidth = stepWidth * minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbar.transition().duration(EASING_DURATION).ease(EASING).attr('x', x).attr('width', Math.abs(width));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tlink: link,\r\n\t\t\trestrict: 'C',\r\n\t\t\tscope: {\r\n\t\t\t\tminValue: '@',\r\n\t\t\t\tmaxValue: '@',\r\n\t\t\t\tminPosition: '@',\r\n\t\t\t\tmaxPosition: '@',\r\n\t\t\t\tvalue: '@',\r\n\t\t\t\tvertical: '@'\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.directives')\r\n\t\t.directive('barMeter', BarMeterDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AlphanumericLcdDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var RECTANGLE_CHAR = '\\u0B8F',\r\n                FOREGROUND_CLASS = 'foreground',\r\n                BACKGROUND_CLASS = 'background',\r\n                rows = parseInt(scope.rows, 10) || 2,\r\n                columns = parseInt(scope.columns, 10) || 16,\r\n                scale = parseFloat(scope.scale, 10) || 1.0,\r\n                lineIterator,\r\n                fontHeight = 18,\r\n                lcdGroup = d3.select(element[0]).attr(svgUtils.transformAttr, svgUtils.translateString(attrs.x, attrs.y));\r\n            function updateLines() {\r\n                var lineNumber;\r\n                for (lineNumber = 0; lineNumber < rows; lineNumber += 1) {\r\n                    if (scope.lines[lineNumber] !== undefined) {\r\n                        d3.select(element[0]).selectAll('.' + FOREGROUND_CLASS).data(scope.lines).text(function (d) {\r\n                            return d.substring(0, columns);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            for (lineIterator = 0; lineIterator < rows; lineIterator += 1) {\r\n                lcdGroup.append('text').attr('class', FOREGROUND_CLASS).attr('x', 0).attr('y', fontHeight * (lineIterator + 1)).attr(svgUtils.transformAttr, svgUtils.scaleString(scale));\r\n                if (scope.showBackground === 'true') {\r\n                    lcdGroup.append('text').attr('class', BACKGROUND_CLASS).attr('x', 0).attr('y', fontHeight * (lineIterator + 1)).attr(svgUtils.transformAttr, svgUtils.scaleString(scale)).data(RECTANGLE_CHAR).text(function (d) {\r\n                        var arr = [];\r\n                        arr.length = columns + 1;\r\n                        return arr.join(d);\r\n                    });\r\n                }\r\n            }\r\n            updateLines();\r\n            scope.$watch('lines', function () {\r\n                updateLines();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                rows: '@',\r\n                columns: '@',\r\n                scale: '@',\r\n                showBackground: '@',\r\n                lines: '='\r\n            }\r\n        };\r\n    }\r\n\r\n    AlphanumericLcdDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('alphanumericLcd', AlphanumericLcdDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function FourteenSegmentDisplayDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '~';\r\n            scope.opacity = 0.0;\r\n            for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                scope.background += '.~';\r\n            }\r\n            if (background) {\r\n                scope.opacity = 0.1;\r\n            }\r\n            scope.$watch('value', function () {\r\n                var width = d3.select(element[0]).select('text#background').node().getBBox().width;\r\n                d3.select(element[0]).select('text#value').attr(svgUtils.transformAttr, svgUtils.translateString(width, 0));\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            template: '<text id=\"background\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" fill=\"black\" opacity=\"{{opacity}}\">{{background}}</text><text id=\"value\" dominant-baseline=\"text-before-edge\" writing-mode=\"lr\">{{value}}</text>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    FourteenSegmentDisplayDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('fourteenSegmentDisplay', FourteenSegmentDisplayDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    function LedLightDirective($interval, svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var icon = d3.select(element[0]),\r\n                blinkingTimer;\r\n            function toggleTurnOn() {\r\n                var targetOpacity = 1.0;\r\n                if(parseFloat(icon.style('opacity')) != 0.0) {\r\n                    targetOpacity = 0.0;\r\n                }\r\n\t\t\t\ticon.transition().duration(25).style('opacity', targetOpacity);\r\n\t\t\t}\r\n\t\t\tfunction toggleBlinking() {\r\n\t\t\t\tif(attrs.blinking === \"true\" && attrs.on === \"true\") {\r\n                    blinkingTimer = $interval(toggleTurnOn, 500);\r\n                } else {\r\n                    $interval.cancel(blinkingTimer);\r\n                }\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tscope.$watch('on', function() {\r\n\t\t\t\ttoggleTurnOn();\r\n\t\t\t});\r\n\t\t\tscope.$watch('blinking', function() {\r\n\t\t\t\ttoggleBlinking();\r\n\t\t\t});\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n\t\t\t\ton: '@',\r\n                blinking: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    LedLightDirective.$inject = ['$interval', 'svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('ledLight', LedLightDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function SevenSegmentDisplayDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '8';\r\n            scope.opacity = 0.0;\r\n            for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                scope.background += '.8';\r\n            }\r\n            if (background) {\r\n                scope.opacity = 0.1;\r\n            }\r\n            scope.$watch('value', function () {\r\n                var width = d3.select(element[0]).select('text#background').node().getBBox().width;\r\n                d3.select(element[0]).select('text#value').attr(svgUtils.transformAttr, svgUtils.translateString(width, 0));\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            template: '<text id=\"background\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" fill=\"black\" opacity=\"{{opacity}}\">{{background}}</text><text id=\"value\" dominant-baseline=\"text-before-edge\" writing-mode=\"lr\">{{value}}</text>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    SevenSegmentDisplayDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('sevenSegmentDisplay', SevenSegmentDisplayDirective);\r\n} (window.d3));"],"sourceRoot":"/source/"}