{"version":3,"sources":["dasboard-ui.min.js"],"names":["angular","module","SvgUtilsFactory","transformAttr","transformOriginAttr","opacityStyle","translateString","x","y","scaleString","scale","rotateString","angle","transformOriginString","indicatorOriginX","indicatorOriginY","factory","d3","AlphanumericLcdDirective","svgUtils","link","scope","element","attrs","updateLines","lineNumber","rows","undefined","lines","select","selectAll","FOREGROUND_CLASS","data","text","d","substring","columns","lineIterator","RECTANGLE_CHAR","BACKGROUND_CLASS","parseInt","parseFloat","fontHeight","lcdGroup","attr","append","showBackground","arr","length","join","$watch","restrict","$inject","directive","window","AnalogGaugeDirective","updateGaugeAngle","value","minValue","startAngle","maxValue","endAngle","deltaAngle","Math","abs","deltaValue","indicator","style","gaugeGroup","indicatorBoundingBox","node","getBBox","width","height","BarMeterDirective","EASING_DURATION","EASING","bar","vertical","originalX","originalY","maxPosition","minPosition","stepWidth","barLength","transition","duration","ease","DotMeterDirective","changeValue","dotsCollection","forEach","domElement","opacity","attributes","FourteenSegmentDisplayDirective","iterator","digits","background","template","LedLightDirective","$interval","setOpacity","icon","blinkingTime","isVisible","turnOnLevel","turnOn","cancel","blinkingTimer","turnOff","turnOffLevel","blinkingMode","mode","toLowerCase","SevenSegmentDisplayDirective"],"mappings":"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","file":"dasboard-ui.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui', ['ngRoute', 'dashboard-ui.directives']);\r\n} ());\n(function () {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.commons', []);\r\n} ());\n(function () {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tfunction SvgUtilsFactory() {\r\n\t\treturn {\r\n\t\t\ttransformAttr: 'transform',\r\n\t\t\ttransformOriginAttr: 'transform-origin',\r\n\t\t\topacityStyle: 'opacity',\r\n\t\t\ttranslateString: function (x, y) {\r\n                return 'translate(' + x + ', ' + y + ')';\r\n            },\r\n            scaleString: function (scale) {\r\n                return 'scale(' + scale + ')';\r\n            },\r\n\t\t\trotateString: function (angle) {\r\n\t\t\t\treturn 'rotate(' + angle + 'deg)';\r\n\t\t\t},\r\n\t\t\ttransformOriginString: function (indicatorOriginX, indicatorOriginY) {\r\n\t\t\t\treturn indicatorOriginX + 'px ' + indicatorOriginY + 'px';\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.commons')\r\n\t\t.factory('svgUtils', SvgUtilsFactory);\r\n} ());\n(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui.directives', ['dashboard-ui.commons']);\r\n} ());\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AlphanumericLcdDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var RECTANGLE_CHAR = '\\u0B8F',\r\n                FOREGROUND_CLASS = 'foreground',\r\n                BACKGROUND_CLASS = 'background',\r\n                rows = parseInt(scope.rows, 10) || 2,\r\n                columns = parseInt(scope.columns, 10) || 16,\r\n                scale = parseFloat(scope.scale, 10) || 1.0,\r\n                lineIterator,\r\n                fontHeight = 18,\r\n                lcdGroup = d3.select(element[0]).attr(svgUtils.transformAttr, svgUtils.translateString(attrs.x, attrs.y));\r\n            function updateLines() {\r\n                var lineNumber;\r\n                for (lineNumber = 0; lineNumber < rows; lineNumber += 1) {\r\n                    if (scope.lines[lineNumber] !== undefined) {\r\n                        d3.select(element[0]).selectAll('.' + FOREGROUND_CLASS).data(scope.lines).text(function (d) {\r\n                            return d.substring(0, columns);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            for (lineIterator = 0; lineIterator < rows; lineIterator += 1) {\r\n                lcdGroup.append('text').attr('class', FOREGROUND_CLASS).attr('x', 0).attr('y', fontHeight * (lineIterator + 1)).attr(svgUtils.transformAttr, svgUtils.scaleString(scale));\r\n                if (scope.showBackground === 'true') {\r\n                    lcdGroup.append('text').attr('class', BACKGROUND_CLASS).attr('x', 0).attr('y', fontHeight * (lineIterator + 1)).attr(svgUtils.transformAttr, svgUtils.scaleString(scale)).data(RECTANGLE_CHAR).text(function (d) {\r\n                        var arr = [];\r\n                        arr.length = columns + 1;\r\n                        return arr.join(d);\r\n                    });\r\n                }\r\n            }\r\n            updateLines();\r\n            scope.$watch('lines', function () {\r\n                updateLines();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                rows: '@',\r\n                columns: '@',\r\n                scale: '@',\r\n                showBackground: '@',\r\n                lines: '='\r\n            }\r\n        };\r\n    }\r\n\r\n    AlphanumericLcdDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('alphanumericLcd', AlphanumericLcdDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AnalogGaugeDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var startAngle = parseInt(scope.startAngle, 10),\r\n                maxValue = parseInt(scope.maxValue, 10),\r\n                endAngle = parseInt(scope.endAngle, 10) || (startAngle * -1),\r\n                minValue = parseInt(scope.minValue, 10) || 0,\r\n                gaugeGroup = d3.select(element[0]),\r\n                indicator = gaugeGroup.select('#indicator'),\r\n                indicatorBoundingBox = indicator.node().getBBox(),\r\n                indicatorOriginX = scope.indicatorOriginX || (indicatorBoundingBox.x + (indicatorBoundingBox.width / 2)),\r\n                indicatorOriginY = scope.indicatorOriginY || (indicatorBoundingBox.y + (indicatorBoundingBox.height / 2)),\r\n                angle,\r\n                deltaAngle = 0,\r\n                deltaValue = maxValue - minValue;\r\n\r\n            function updateGaugeAngle() {\r\n                var value = parseInt(scope.value, 10);\r\n                if (value < minValue) {\r\n                    angle = startAngle;\r\n                } else if (value > maxValue) {\r\n                    angle = endAngle;\r\n                } else {\r\n                    deltaAngle = Math.abs(endAngle - startAngle);\r\n                    if (startAngle < endAngle) {\r\n                        //clockwise\r\n                        angle = startAngle + Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    } else {\r\n                        //counter clockwise\r\n                        angle = startAngle - Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    }\r\n                    indicator.style(svgUtils.transformOriginAttr, svgUtils.transformOriginString(indicatorOriginX, indicatorOriginY));\r\n                    indicator.style(svgUtils.transformAttr, svgUtils.rotateString(angle));\r\n                }\r\n            }\r\n            gaugeGroup.attr(svgUtils.transformAttr, svgUtils.translateString(attrs.x, attrs.y));\r\n            scope.$watch('value', function () {\r\n                updateGaugeAngle();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                value: '@',\r\n                startAngle: '@',\r\n                endAngle: '@',\r\n                maxValue: '@',\r\n                minValue: '@',\r\n                indicatorOriginX: '@',\r\n                indicatorOriginY: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    AnalogGaugeDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('analogGauge', AnalogGaugeDirective);\r\n} (window.d3));\n(function (d3) {\r\n\t'use strict';\r\n\t/*global angular, console*/\r\n\r\n\tfunction BarMeterDirective() {\r\n\t\tfunction link(scope, element, attrs) {\r\n\t\t\tvar EASING_DURATION = 250,\r\n\t\t\t\tEASING = 'linear',\r\n\t\t\t\tbar = d3.select(element[0]).select('#bar'),\r\n\t\t\t\tvertical = (scope.vertical === 'true') || false,\r\n\t\t\t\toriginalX = parseInt(bar.attr('x'), 10),\r\n\t\t\t\toriginalY = parseInt(bar.attr('y'), 10),\r\n\t\t\t\tmaxPosition = parseInt(scope.maxPosition, 10),\r\n\t\t\t\tminPosition = parseInt(scope.minPosition, 10),\r\n\t\t\t\tminValue = parseInt(scope.minValue, 10),\r\n\t\t\t\tmaxValue = parseInt(scope.maxValue, 10),\r\n\t\t\t\tstepWidth = ((maxPosition - minPosition) / (maxValue - minValue));\r\n\t\t\tscope.$watch('value', function () {\r\n\t\t\t\tvar value = parseInt(scope.value, 10),\r\n\t\t\t\t\tbarLength = Math.abs(stepWidth * value),\r\n\t\t\t\t\tx,\r\n                    y,\r\n                    height,\r\n                    width;\r\n\t\t\t\tif (vertical) {\r\n\t\t\t\t\tif (value >= 0 && value <= maxValue) {\r\n\t\t\t\t\t\ty = originalY - barLength;\r\n\t\t\t\t\t\theight = barLength;\r\n\t\t\t\t\t} else if (value < 0 && value >= minValue) {\r\n\t\t\t\t\t\ty = originalY;\r\n\t\t\t\t\t\theight = barLength;\r\n\t\t\t\t\t} else if (value > maxValue) {\r\n\t\t\t\t\t\ty = maxPosition;\r\n\t\t\t\t\t\theight = stepWidth * maxValue;\r\n\t\t\t\t\t} else if (value < minValue) {\r\n\t\t\t\t\t\ty = originalY;\r\n\t\t\t\t\t\theight = stepWidth * minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbar.transition().duration(EASING_DURATION).ease(EASING).attr('y', y).attr('height', Math.abs(height));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (value >= 0 && value <= maxValue) {\r\n\t\t\t\t\t\tx = originalX;\r\n\t\t\t\t\t\twidth = barLength;\r\n\t\t\t\t\t} else if (value < 0 && value >= minValue) {\r\n\t\t\t\t\t\tx = originalX - barLength;\r\n\t\t\t\t\t\twidth = barLength;\r\n\t\t\t\t\t} else if (value > maxValue) {\r\n\t\t\t\t\t\tx = originalX;\r\n\t\t\t\t\t\twidth = stepWidth * maxValue;\r\n\t\t\t\t\t} else if (value < minValue) {\r\n\t\t\t\t\t\tx = minPosition;\r\n\t\t\t\t\t\twidth = stepWidth * minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbar.transition().duration(EASING_DURATION).ease(EASING).attr('x', x).attr('width', Math.abs(width));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tlink: link,\r\n\t\t\trestrict: 'C',\r\n\t\t\tscope: {\r\n\t\t\t\tminValue: '@',\r\n\t\t\t\tmaxValue: '@',\r\n\t\t\t\tminPosition: '@',\r\n\t\t\t\tmaxPosition: '@',\r\n\t\t\t\tvalue: '@',\r\n\t\t\t\tvertical: '@'\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.directives')\r\n\t\t.directive('barMeter', BarMeterDirective);\r\n} (window.d3));\n(function (d3) {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tfunction DotMeterDirective(svgUtils) {\r\n\t\tfunction link(scope, element, attrs) {\r\n\t\t\tvar minValue = parseInt(scope.minValue, 10) || 0,\r\n\t\t\t\tmaxValue = parseInt(scope.maxValue, 10),\r\n\t\t\t\tdotsCollection = d3.select(element[0]);\r\n\t\t\tfunction changeValue() {\r\n\t\t\t\tvar value = parseInt(scope.value, 10);\r\n\t\t\t\tif (value > maxValue) {\r\n\t\t\t\t\tvalue = maxValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (value < minValue) {\r\n\t\t\t\t\tvalue = minValue;\r\n\t\t\t\t}\r\n\t\t\t\tdotsCollection.selectAll('[id^=dot]')[0].forEach(function(domElement) {\r\n\t\t\t\t\tvar opacity = 1.0;\r\n\t\t\t\t\tif(parseInt(domElement.attributes['data-value'].value, 10) > value) {\r\n\t\t\t\t\t\topacity = 0.0\r\n\t\t\t\t\t}\r\n\t\t\t\t\td3.select(domElement).style(svgUtils.opacityStyle, opacity);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tscope.$watch('value', function () {\r\n\t\t\t\tchangeValue();\r\n\t\t\t}, true);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tlink: link,\r\n\t\t\trestrict: 'C',\r\n\t\t\tscope: {\r\n\t\t\t\tminValue: '@',\r\n\t\t\t\tmaxValue: '@',\r\n\t\t\t\tvalue: '@'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tDotMeterDirective.$inject = ['svgUtils'];\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.directives')\r\n\t\t.directive('dotMeter', DotMeterDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function FourteenSegmentDisplayDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '~';\r\n            scope.opacity = 0.0;\r\n            for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                scope.background += '.~';\r\n            }\r\n            if (background) {\r\n                scope.opacity = 0.1;\r\n            }\r\n            scope.$watch('value', function () {\r\n                var width = d3.select(element[0]).select('text#background').node().getBBox().width;\r\n                d3.select(element[0]).select('text#value').attr(svgUtils.transformAttr, svgUtils.translateString(width, 0));\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            template: '<text id=\"background\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" fill=\"black\" opacity=\"{{opacity}}\">{{background}}</text><text id=\"value\" dominant-baseline=\"text-before-edge\" writing-mode=\"lr\">{{value}}</text>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    FourteenSegmentDisplayDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('fourteenSegmentDisplay', FourteenSegmentDisplayDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    function LedLightDirective($interval, svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var icon = d3.select(element[0]),\r\n                blinkingTime = parseInt(scope.blinkingTime) || 25,\r\n                turnOnLevel = parseFloat(scope.turnOnLevel) || 1.0,\r\n                turnOffLevel = parseFloat(scope.turnOffLevel) || 0.0,\r\n                blinkingTimer;\r\n            function setOpacity(opacity) {\r\n                icon.transition().duration(blinkingTime).style(svgUtils.opacityStyle, opacity);\r\n            }\r\n            function isVisible() {\r\n                return parseFloat(icon.style(svgUtils.opacityStyle)) === turnOnLevel;\r\n            }\r\n            function turnOn() {\r\n                $interval.cancel(blinkingTimer);\r\n                setOpacity(turnOnLevel);\r\n            }\r\n            function turnOff() {\r\n                $interval.cancel(blinkingTimer);\r\n                setOpacity(turnOffLevel);\r\n            }\r\n            function blinkingMode() {\r\n                blinkingTimer = $interval(function () {\r\n                    if (isVisible()) {\r\n                        setOpacity(turnOffLevel);\r\n                    } else {\r\n                        setOpacity(turnOnLevel);\r\n                    }\r\n                }, 500);\r\n            }\r\n            scope.$watch('mode', function () {\r\n                if (scope.mode.toLowerCase() === 'on') {\r\n                    turnOn();\r\n                } else if (scope.mode.toLowerCase() === 'blinking') {\r\n                    blinkingMode();\r\n                } else {\r\n                    turnOff();\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                mode: '@',\r\n                turnOffLevel: '@',\r\n                turnOnLevel: '@',\r\n                blinkingTime: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    LedLightDirective.$inject = ['$interval', 'svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('ledLight', LedLightDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function SevenSegmentDisplayDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '8';\r\n            scope.opacity = 0.0;\r\n            for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                scope.background += '.8';\r\n            }\r\n            if (background) {\r\n                scope.opacity = 0.1;\r\n            }\r\n            scope.$watch('value', function () {\r\n                var width = d3.select(element[0]).select('text#background').node().getBBox().width;\r\n                d3.select(element[0]).select('text#value').attr(svgUtils.transformAttr, svgUtils.translateString(width, 0));\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            template: '<text id=\"background\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" fill=\"black\" opacity=\"{{opacity}}\">{{background}}</text><text id=\"value\" dominant-baseline=\"text-before-edge\" writing-mode=\"lr\">{{value}}</text>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    SevenSegmentDisplayDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('sevenSegmentDisplay', SevenSegmentDisplayDirective);\r\n} (window.d3));"],"sourceRoot":"/source/"}