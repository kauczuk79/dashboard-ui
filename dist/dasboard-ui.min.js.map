{"version":3,"sources":["dasboard-ui.min.js"],"names":["angular","module","SvgUtilsFactory","transformAttr","transformOriginAttr","opacityStyle","translateString","x","y","scaleString","scale","rotateString","angle","transformOriginString","indicatorOriginX","indicatorOriginY","factory","d3","AlphanumericLcdDirective","svgUtils","link","scope","element","attrs","updateLines","lineNumber","rows","undefined","lines","select","selectAll","FOREGROUND_CLASS","data","text","substring","columns","lineIterator","yPosition","RECTANGLE_CHAR","BACKGROUND_CLASS","parseInt","parseFloat","showBackground","lcdGroup","attr","fontHeight","append","classed","arr","length","join","$watch","restrict","$inject","directive","window","AnalogGaugeDirective","updateGaugeAngle","value","minValue","startAngle","maxValue","endAngle","angleDifference","Math","abs","deltaAngle","deltaValue","clockwise","indicator","style","gaugeGroup","indicatorBoundingBox","node","getBBox","width","height","BarMeterDirective","updateValue","barLength","stepWidth","originalY","originalX","maxPosition","minPosition","vertical","bar","transition","duration","EASING_DURATION","ease","EASING","barWidth","DotMeterDirective","changeValue","dotsCollection","forEach","domElement","opacity","selection","FourteenSegmentDisplayDirective","iterator","digits","background","ready","d3element","template","LedLightDirective","$interval","setOpacity","icon","blinkingInterval","isVisible","turnOnLevel","turnOn","cancel","blinkingTimer","turnOff","turnOffLevel","blinkingMode","mode","toLowerCase","SevenSegmentDisplayDirective"],"mappings":"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","file":"dasboard-ui.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui', ['ngRoute', 'dashboard-ui.directives']);\r\n} ());\n(function () {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.commons', []);\r\n} ());\n(function () {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tfunction SvgUtilsFactory() {\r\n\t\treturn {\r\n\t\t\ttransformAttr: 'transform',\r\n\t\t\ttransformOriginAttr: 'transform-origin',\r\n\t\t\topacityStyle: 'opacity',\r\n\t\t\ttranslateString: function (x, y) {\r\n                return 'translate(' + x + ', ' + y + ')';\r\n            },\r\n            scaleString: function (scale) {\r\n                return 'scale(' + scale + ')';\r\n            },\r\n\t\t\trotateString: function (angle) {\r\n\t\t\t\treturn 'rotate(' + angle + 'deg)';\r\n\t\t\t},\r\n\t\t\ttransformOriginString: function (indicatorOriginX, indicatorOriginY) {\r\n\t\t\t\treturn indicatorOriginX + 'px ' + indicatorOriginY + 'px';\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.commons')\r\n\t\t.factory('svgUtils', SvgUtilsFactory);\r\n} ());\n(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui.directives', ['dashboard-ui.commons']);\r\n} ());\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AlphanumericLcdDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var RECTANGLE_CHAR = '\\u0B8F',\r\n                FOREGROUND_CLASS = 'foreground',\r\n                BACKGROUND_CLASS = 'background',\r\n                rows = parseInt(scope.rows, 10) || 2,\r\n                columns = parseInt(scope.columns, 10) || 16,\r\n                scale = parseFloat(scope.scale, 10) || 1.0,\r\n                x = parseFloat(scope.x) || 0,\r\n                y = parseFloat(scope.y) || 0,\r\n                showBackground = (scope.showBackground === 'true'),\r\n                lcdGroup = d3.select(element[0]).attr(svgUtils.transformAttr, svgUtils.translateString(x, y)),\r\n                lineIterator,\r\n                fontHeight = 18,\r\n                yPosition;\r\n            function updateLines() {\r\n                var lineNumber;\r\n                for (lineNumber = 0; lineNumber < rows; lineNumber += 1) {\r\n                    if (scope.lines[lineNumber] !== undefined) {\r\n                        d3.select(element[0]).selectAll('.'+FOREGROUND_CLASS).data(scope.lines).text(function (data) {\r\n                            return data.substring(0, columns);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            for (lineIterator = 0; lineIterator < rows; lineIterator += 1) {\r\n                yPosition = fontHeight * (lineIterator + 1);\r\n                lcdGroup.append('text').classed(FOREGROUND_CLASS, true).attr('y', yPosition).attr(svgUtils.transformAttr, svgUtils.scaleString(scale));\r\n                if (showBackground) {\r\n                    lcdGroup.append('text').classed(BACKGROUND_CLASS, true).attr('y', yPosition).attr(svgUtils.transformAttr, svgUtils.scaleString(scale)).data(RECTANGLE_CHAR).text(function (data) {\r\n                        var arr = [];\r\n                        arr.length = columns + 1;\r\n                        return arr.join(data);\r\n                    });\r\n                }\r\n            }\r\n            scope.$watch('lines', updateLines);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                rows: '@',\r\n                columns: '@',\r\n                scale: '@',\r\n                showBackground: '@',\r\n                lines: '=',\r\n                x: '@',\r\n                y: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    AlphanumericLcdDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('alphanumericLcd', AlphanumericLcdDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AnalogGaugeDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var startAngle = parseInt(scope.startAngle, 10),\r\n                maxValue = parseInt(scope.maxValue, 10),\r\n                endAngle = parseInt(scope.endAngle, 10) || (startAngle * -1),\r\n                minValue = parseInt(scope.minValue, 10) || 0,\r\n                x = parseFloat(scope.x) || 0.0,\r\n                y = parseFloat(scope.y) || 0.0,\r\n                gaugeGroup = d3.select(element[0]),\r\n                indicator = gaugeGroup.select('#indicator'),\r\n                indicatorBoundingBox = indicator.node().getBBox(),\r\n                indicatorOriginX = scope.indicatorOriginX || (indicatorBoundingBox.x + (indicatorBoundingBox.width / 2)),\r\n                indicatorOriginY = scope.indicatorOriginY || (indicatorBoundingBox.y + (indicatorBoundingBox.height / 2)),\r\n                angle,\r\n                deltaAngle = endAngle - startAngle,\r\n                deltaValue = maxValue - minValue;\r\n\r\n            function updateGaugeAngle() {\r\n                var value = parseInt(scope.value, 10);\r\n                if (value < minValue) {\r\n                    angle = startAngle;\r\n                } else if (value > maxValue) {\r\n                    angle = endAngle;\r\n                } else {\r\n                    var angleDifference = Math.abs((deltaAngle / deltaValue) * (minValue - value)),\r\n                        clockwise = startAngle < endAngle;\r\n                    if (clockwise) {\r\n                        angle = startAngle + angleDifference;\r\n                    } else {\r\n                        angle = startAngle - angleDifference;\r\n                    }\r\n                }\r\n                indicator.style(svgUtils.transformAttr, svgUtils.rotateString(angle));\r\n            }\r\n            gaugeGroup.attr(svgUtils.transformAttr, svgUtils.translateString(x, y));\r\n            indicator.style(svgUtils.transformOriginAttr, svgUtils.transformOriginString(indicatorOriginX, indicatorOriginY));\r\n            scope.$watch('value', updateGaugeAngle);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                value: '@',\r\n                startAngle: '@',\r\n                endAngle: '@',\r\n                maxValue: '@',\r\n                minValue: '@',\r\n                indicatorOriginX: '@',\r\n                indicatorOriginY: '@',\r\n                x: '@',\r\n                y: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    AnalogGaugeDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('analogGauge', AnalogGaugeDirective);\r\n} (window.d3));\n(function (d3) {\r\n\t'use strict';\r\n\t/*global angular, console*/\r\n\r\n\tfunction BarMeterDirective() {\r\n\t\tfunction link(scope, element, attrs) {\r\n\t\t\tvar EASING_DURATION = 250,\r\n\t\t\t\tEASING = 'linear',\r\n\t\t\t\tbar = d3.select(element[0]).select('#bar'),\r\n\t\t\t\tbarWidth = parseInt(bar.attr('width')) || 0,\r\n\t\t\t\tmaxValue = parseInt(scope.maxValue, 10),\r\n\t\t\t\tminValue = parseInt(scope.minValue, 10) || 0,\r\n\t\t\t\tminPosition = parseInt(scope.minPosition, 10) || 0,\r\n\t\t\t\tmaxPosition = parseInt(scope.maxPosition, 10) || barWidth,\r\n\t\t\t\tvertical = (scope.vertical === 'true'),\r\n\t\t\t\toriginalX = parseInt(bar.attr('x'), 10) || 0,\r\n\t\t\t\toriginalY = parseInt(bar.attr('y'), 10) || 0,\r\n\t\t\t\tstepWidth = ((maxPosition - minPosition) / (maxValue - minValue));\r\n\t\t\tfunction updateValue() {\r\n\t\t\t\tvar value = parseInt(scope.value, 10) || 0,\r\n\t\t\t\t\tbarLength = Math.abs(stepWidth * value),\r\n\t\t\t\t\tx,\r\n                    y,\r\n                    height,\r\n                    width;\r\n\t\t\t\tif (value >= 0 && value <= maxValue) {\r\n\t\t\t\t\ty = originalY - barLength;\r\n\t\t\t\t\theight = barLength;\r\n\t\t\t\t\tx = originalX;\r\n\t\t\t\t\twidth = barLength;\r\n\t\t\t\t} else if (value < 0 && value >= minValue) {\r\n\t\t\t\t\ty = originalY;\r\n\t\t\t\t\theight = barLength;\r\n\t\t\t\t\tx = originalX - barLength;\r\n\t\t\t\t\twidth = barLength;\r\n\t\t\t\t} else if (value > maxValue) {\r\n\t\t\t\t\ty = maxPosition;\r\n\t\t\t\t\theight = stepWidth * maxValue;\r\n\t\t\t\t\tx = originalX;\r\n\t\t\t\t\twidth = stepWidth * maxValue;\r\n\t\t\t\t} else if (value < minValue) {\r\n\t\t\t\t\ty = originalY;\r\n\t\t\t\t\theight = stepWidth * minValue;\r\n\t\t\t\t\tx = minPosition;\r\n\t\t\t\t\twidth = stepWidth * minValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (vertical) {\r\n\t\t\t\t\tbar.transition().duration(EASING_DURATION).ease(EASING).attr('y', y).attr('height', Math.abs(height));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbar.transition().duration(EASING_DURATION).ease(EASING).attr('x', x).attr('width', Math.abs(width));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tscope.$watch('value', updateValue);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tlink: link,\r\n\t\t\trestrict: 'C',\r\n\t\t\tscope: {\r\n\t\t\t\tminValue: '@',\r\n\t\t\t\tmaxValue: '@',\r\n\t\t\t\tminPosition: '@',\r\n\t\t\t\tmaxPosition: '@',\r\n\t\t\t\tvalue: '@',\r\n\t\t\t\tvertical: '@'\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.directives')\r\n\t\t.directive('barMeter', BarMeterDirective);\r\n} (window.d3));\n(function (d3) {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tfunction DotMeterDirective(svgUtils) {\r\n\t\tfunction link(scope, element, attrs) {\r\n\t\t\tvar minValue = parseInt(scope.minValue, 10) || 0,\r\n\t\t\t\tmaxValue = parseInt(scope.maxValue, 10),\r\n\t\t\t\tdotsCollection = d3.select(element[0]);\r\n\t\t\tfunction changeValue() {\r\n\t\t\t\tvar value = parseInt(scope.value, 10) || 0;\r\n\t\t\t\tif (value > maxValue) {\r\n\t\t\t\t\tvalue = maxValue;\r\n\t\t\t\t} else if (value < minValue) {\r\n\t\t\t\t\tvalue = minValue;\r\n\t\t\t\t}\r\n\t\t\t\tdotsCollection.selectAll('[id^=dot]')[0].forEach(function(domElement) {\r\n\t\t\t\t\tvar opacity = 1.0,\r\n\t\t\t\t\t\tselection = d3.select(domElement);\r\n\t\t\t\t\tif(parseInt(selection.attr('data-value'), 10) > value) {\r\n\t\t\t\t\t\topacity = 0.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tselection.style(svgUtils.opacityStyle, opacity);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tscope.$watch('value', changeValue);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tlink: link,\r\n\t\t\trestrict: 'C',\r\n\t\t\tscope: {\r\n\t\t\t\tminValue: '@',\r\n\t\t\t\tmaxValue: '@',\r\n\t\t\t\tvalue: '@'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tDotMeterDirective.$inject = ['svgUtils'];\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.directives')\r\n\t\t.directive('dotMeter', DotMeterDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function FourteenSegmentDisplayDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                background = (scope.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '~';\r\n            scope.opacity = 0.0;\r\n            for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                scope.background += '.~';\r\n            }\r\n            if (background) {\r\n                scope.opacity = 0.1;\r\n            }\r\n            element.ready(function() {\r\n                var d3element = d3.select(element[0]),\r\n                    width = d3element.select('text#background').node().getBBox().width;\r\n                d3element.select('text#value').attr(svgUtils.transformAttr, svgUtils.translateString(width, 0));\r\n            });\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            template: '<text id=\"background\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" fill=\"black\" opacity=\"{{opacity}}\">{{background}}</text><text id=\"value\" dominant-baseline=\"text-before-edge\" writing-mode=\"lr\">{{value}}</text>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@',\r\n                showBackground: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    FourteenSegmentDisplayDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('fourteenSegmentDisplay', FourteenSegmentDisplayDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    function LedLightDirective($interval, svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var icon = d3.select(element[0]),\r\n                blinkingInterval = parseInt(scope.blinkingInterval) || 25,\r\n                turnOnLevel = parseFloat(scope.turnOnLevel) || 1.0,\r\n                turnOffLevel = parseFloat(scope.turnOffLevel) || 0.0,\r\n                blinkingTimer;\r\n            function setOpacity(opacity) {\r\n                icon.transition().duration(blinkingInterval).style(svgUtils.opacityStyle, opacity);\r\n            }\r\n            function isVisible() {\r\n                return parseFloat(icon.style(svgUtils.opacityStyle)) === turnOnLevel;\r\n            }\r\n            function turnOn() {\r\n                $interval.cancel(blinkingTimer);\r\n                setOpacity(turnOnLevel);\r\n            }\r\n            function turnOff() {\r\n                $interval.cancel(blinkingTimer);\r\n                setOpacity(turnOffLevel);\r\n            }\r\n            function blinkingMode() {\r\n                blinkingTimer = $interval(function () {\r\n                    if (isVisible()) {\r\n                        setOpacity(turnOffLevel);\r\n                    } else {\r\n                        setOpacity(turnOnLevel);\r\n                    }\r\n                }, 500);\r\n            }\r\n            scope.$watch('mode', function () {\r\n                if (scope.mode.toLowerCase() === 'on') {\r\n                    turnOn();\r\n                } else if (scope.mode.toLowerCase() === 'blinking') {\r\n                    blinkingMode();\r\n                } else {\r\n                    turnOff();\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                mode: '@',\r\n                turnOffLevel: '@',\r\n                turnOnLevel: '@',\r\n                blinkingInterval: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    LedLightDirective.$inject = ['$interval', 'svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('ledLight', LedLightDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function SevenSegmentDisplayDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                background = (scope.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '8';\r\n            scope.opacity = 0.0;\r\n            for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                scope.background += '.8';\r\n            }\r\n            if (background) {\r\n                scope.opacity = 0.1;\r\n            }\r\n            element.ready(function() {\r\n                var d3element = d3.select(element[0]),\r\n                    width = d3element.select('text#background').node().getBBox().width;\r\n                d3element.select('text#value').attr(svgUtils.transformAttr, svgUtils.translateString(width, 0));\r\n            });\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            template: '<text id=\"background\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" fill=\"black\" opacity=\"{{opacity}}\">{{background}}</text><text id=\"value\" dominant-baseline=\"text-before-edge\" writing-mode=\"lr\">{{value}}</text>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@',\r\n                showBackground: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    SevenSegmentDisplayDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('sevenSegmentDisplay', SevenSegmentDisplayDirective);\r\n} (window.d3));"],"sourceRoot":"/source/"}