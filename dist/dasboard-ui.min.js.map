{"version":3,"sources":["dasboard-ui.min.js"],"names":["angular","module","SvgUtilsFactory","transformAttr","transformOriginAttr","translateString","x","y","scaleString","scale","rotateString","angle","transformOriginString","indicatorOriginX","indicatorOriginY","factory","d3","AlphanumericLcdDirective","svgUtils","link","scope","element","attrs","updateLines","lineNumber","rows","undefined","lines","select","selectAll","FOREGROUND_CLASS","data","text","d","substring","columns","RECTANGLE_CHAR","BACKGROUND_CLASS","parseInt","parseFloat","lineIterator","fontHeight","lcdGroup","attr","append","showBackground","background","Array","join","$watch","restrict","$inject","directive","window","BarMeterDirective","EASING_DURATION","EASING","bar","vertical","originalX","originalY","maxPosition","minPosition","minValue","maxValue","stepWidth","height","width","value","barLength","Math","abs","transition","duration","ease","AnalogGaugeDirective","updateGaugeAngle","startAngle","endAngle","deltaAngle","deltaValue","indicator","style","gaugeGroup","indicatorBoundingBox","node","getBBox","FourteenSegmentDisplayDirective","iterator","digits","opacity","template","SevenSegmentDisplayDirective"],"mappings":"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","file":"dasboard-ui.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui', ['ngRoute', 'dashboard-ui.directives']);\r\n} ());\n(function () {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.commons', []);\r\n} ());\n(function () {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tfunction SvgUtilsFactory() {\r\n\t\treturn {\r\n\t\t\ttransformAttr: 'transform',\r\n\t\t\ttransformOriginAttr: 'transform-origin',\r\n\t\t\ttranslateString: function (x, y) {\r\n                return 'translate(' + x + ', ' + y + ')';\r\n            },\r\n            scaleString: function (scale) {\r\n                return 'scale(' + scale + ')';\r\n            },\r\n\t\t\trotateString: function (angle) {\r\n\t\t\t\treturn 'rotate(' + angle + 'deg)';\r\n\t\t\t},\r\n\t\t\ttransformOriginString: function (indicatorOriginX, indicatorOriginY) {\r\n\t\t\t\treturn indicatorOriginX + 'px ' + indicatorOriginY + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.commons')\r\n\t\t.factory('svgUtils', SvgUtilsFactory);\r\n} ());\n(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui.directives', ['dashboard-ui.commons']);\r\n} ());\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AlphanumericLcdDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var RECTANGLE_CHAR = '\\u0B8F',\r\n                FOREGROUND_CLASS = 'foreground',\r\n                BACKGROUND_CLASS = 'background',\r\n                rows = parseInt(scope.rows, 10) || 2,\r\n                columns = parseInt(scope.columns, 10) || 16,\r\n                scale = parseFloat(scope.scale, 10) || 1.0,\r\n                lineIterator = 0,\r\n                fontHeight = 18,\r\n                lcdGroup = d3.select(element[0]).attr(svgUtils.transformAttr, svgUtils.translateString(attrs.x, attrs.y));\r\n            function updateLines() {\r\n                var lineNumber = 0;\r\n                for (; lineNumber < rows; lineNumber += 1) {\r\n                    if (scope.lines[lineNumber] !== undefined) {\r\n                        d3.select(element[0]).selectAll('.' + FOREGROUND_CLASS).data(scope.lines).text(function (d) {\r\n                            return d.substring(0, columns);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            for (; lineIterator < rows; lineIterator += 1) {\r\n                lcdGroup.append('text').attr('class', FOREGROUND_CLASS).attr('x', 0).attr('y', fontHeight * (lineIterator + 1)).attr(svgUtils.transformAttr, svgUtils.scaleString(scale));\r\n                if (scope.showBackground === 'true') {\r\n                    var background = lcdGroup.append('text').attr('class', BACKGROUND_CLASS).attr('x', 0).attr('y', fontHeight * (lineIterator + 1)).attr(svgUtils.transformAttr, svgUtils.scaleString(scale));\r\n                    background.data(RECTANGLE_CHAR).text(function (d) {\r\n                        return new Array(columns + 1).join(d);\r\n                    });\r\n                }\r\n            }\r\n            updateLines();\r\n            scope.$watch('lines', function () {\r\n                updateLines();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                rows: '@',\r\n                columns: '@',\r\n                scale: '@',\r\n                showBackground: '@',\r\n                lines: '='\r\n            }\r\n        };\r\n    }\r\n\r\n    AlphanumericLcdDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('alphanumericLcd', AlphanumericLcdDirective);\r\n} (window.d3));\n(function (d3) {\r\n\t'use strict';\r\n\t/*global angular, console*/\r\n\r\n\tfunction BarMeterDirective() {\r\n\t\tfunction link(scope, element, attrs) {\r\n\t\t\tvar EASING_DURATION = 250,\r\n\t\t\t\tEASING = 'linear',\r\n\t\t\t\tbar = d3.select(element[0]).select('#bar'),\r\n\t\t\t\tvertical = (scope.vertical === 'true') || false,\r\n\t\t\t\toriginalX = parseInt(bar.attr('x'), 10),\r\n\t\t\t\toriginalY = parseInt(bar.attr('y'), 10),\r\n\t\t\t\tmaxPosition = parseInt(scope.maxPosition, 10),\r\n\t\t\t\tminPosition = parseInt(scope.minPosition, 10),\r\n\t\t\t\tminValue = parseInt(scope.minValue, 10),\r\n\t\t\t\tmaxValue = parseInt(scope.maxValue, 10),\r\n\t\t\t\tstepWidth = ((maxPosition - minPosition) / (maxValue - minValue));\r\n\t\t\tscope.$watch('value', function () {\r\n\t\t\t\tvar value = parseInt(scope.value, 10),\r\n\t\t\t\t\tbarLength = Math.abs(stepWidth * value),\r\n\t\t\t\t\tx, y, height, width;\r\n\t\t\t\tif (vertical) {\r\n\t\t\t\t\tif (value >= 0 && value <= maxValue) {\r\n\t\t\t\t\t\ty = originalY - barLength;\r\n\t\t\t\t\t\theight = barLength;\r\n\t\t\t\t\t} else if (value < 0 && value >= minValue) {\r\n\t\t\t\t\t\ty = originalY;\r\n\t\t\t\t\t\theight = barLength;\r\n\t\t\t\t\t} else if (value > maxValue) {\r\n\t\t\t\t\t\ty = maxPosition;\r\n\t\t\t\t\t\theight = stepWidth * maxValue;\r\n\t\t\t\t\t} else if (value < minValue) {\r\n\t\t\t\t\t\ty = originalY;\r\n\t\t\t\t\t\theight = stepWidth * minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbar.transition().duration(EASING_DURATION).ease(EASING).attr('y', y).attr('height', Math.abs(height));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (value >= 0 && value <= maxValue) {\r\n\t\t\t\t\t\tx = originalX;\r\n\t\t\t\t\t\twidth = barLength;\r\n\t\t\t\t\t} else if (value < 0 && value >= minValue) {\r\n\t\t\t\t\t\tx = originalX - barLength;\r\n\t\t\t\t\t\twidth = barLength;\r\n\t\t\t\t\t} else if (value > maxValue) {\r\n\t\t\t\t\t\tx = originalX;\r\n\t\t\t\t\t\twidth = stepWidth * maxValue;\r\n\t\t\t\t\t} else if (value < minValue) {\r\n\t\t\t\t\t\tx = minPosition;\r\n\t\t\t\t\t\twidth = stepWidth * minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbar.transition().duration(EASING_DURATION).ease(EASING).attr('x', x).attr('width', Math.abs(width));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tlink: link,\r\n\t\t\trestrict: 'C',\r\n\t\t\tscope: {\r\n\t\t\t\tminValue: '@',\r\n\t\t\t\tmaxValue: '@',\r\n\t\t\t\tminPosition: '@',\r\n\t\t\t\tmaxPosition: '@',\r\n\t\t\t\tvalue: '@',\r\n\t\t\t\tvertical: '@'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.directives')\r\n\t\t.directive('barMeter', BarMeterDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AnalogGaugeDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var startAngle = parseInt(scope.startAngle, 10),\r\n                maxValue = parseInt(scope.maxValue, 10),\r\n                endAngle = parseInt(scope.endAngle, 10) || (startAngle * -1),\r\n                minValue = parseInt(scope.minValue, 10) || 0,\r\n                gaugeGroup = d3.select(element[0]),\r\n                indicator = gaugeGroup.select('#indicator'),\r\n                indicatorBoundingBox = indicator.node().getBBox(),\r\n                indicatorOriginX = scope.indicatorOriginX || (indicatorBoundingBox.x + (indicatorBoundingBox.width / 2)),\r\n                indicatorOriginY = scope.indicatorOriginY || (indicatorBoundingBox.y + (indicatorBoundingBox.height / 2)),\r\n                angle,\r\n                deltaAngle = 0,\r\n                deltaValue = maxValue - minValue;\r\n\r\n            function updateGaugeAngle() {\r\n                var value = parseInt(scope.value, 10);\r\n                if (value < minValue) {\r\n                    angle = startAngle;\r\n                } else if (value > maxValue) {\r\n                    angle = endAngle;\r\n                } else {\r\n                    deltaAngle = Math.abs(endAngle - startAngle);\r\n                    if (startAngle < endAngle) {\r\n                        //clockwise\r\n                        angle = startAngle + Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    } else {\r\n                        //counter clockwise\r\n                        angle = startAngle - Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    }\r\n                    indicator.style(svgUtils.transformOriginAttr, svgUtils.transformOriginString(indicatorOriginX, indicatorOriginY));\r\n                    indicator.style(svgUtils.transformAttr, svgUtils.rotateString(angle));\r\n                }\r\n            }\r\n            gaugeGroup.attr(svgUtils.transformAttr, svgUtils.translateString(attrs.x, attrs.y));\r\n            scope.$watch('value', function () {\r\n                updateGaugeAngle();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                value: '@',\r\n                startAngle: '@',\r\n                endAngle: '@',\r\n                maxValue: '@',\r\n                minValue: '@',\r\n                indicatorOriginX: '@',\r\n                indicatorOriginY: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    AnalogGaugeDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('analogGauge', AnalogGaugeDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function FourteenSegmentDisplayDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '~';\r\n            scope.opacity = 0.0;\r\n            for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                scope.background += '.~';\r\n            }\r\n            if (background) {\r\n                scope.opacity = 0.1;\r\n            }\r\n            scope.$watch('value', function () {\r\n                var width = d3.select(element[0]).select('text#background').node().getBBox().width;\r\n                d3.select(element[0]).select('text#value').attr(svgUtils.transformAttr, svgUtils.translateString(width, 0));\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            template: '<text id=\"background\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" fill=\"black\" opacity=\"{{opacity}}\">{{background}}</text><text id=\"value\" dominant-baseline=\"text-before-edge\" writing-mode=\"lr\">{{value}}</text>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    FourteenSegmentDisplayDirective.$inject = ['svgUtils']\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('fourteenSegmentDisplay', FourteenSegmentDisplayDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function SevenSegmentDisplayDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '8';\r\n            scope.opacity = 0.0;\r\n            for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                scope.background += '.8';\r\n            }\r\n            if (background) {\r\n                scope.opacity = 0.1;\r\n            }\r\n            scope.$watch('value', function () {\r\n                var width = d3.select(element[0]).select('text#background').node().getBBox().width;\r\n                d3.select(element[0]).select('text#value').attr(svgUtils.transformAttr, svgUtils.translateString(width, 0));\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            template: '<text id=\"background\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" fill=\"black\" opacity=\"{{opacity}}\">{{background}}</text><text id=\"value\" dominant-baseline=\"text-before-edge\" writing-mode=\"lr\">{{value}}</text>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    SevenSegmentDisplayDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('sevenSegmentDisplay', SevenSegmentDisplayDirective);\r\n} (window.d3));"],"sourceRoot":"/source/"}