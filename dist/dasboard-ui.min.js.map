{"version":3,"sources":["dasboard-ui.min.js"],"names":["angular","module","d3","AlphanumericLcdDirective","link","scope","element","attrs","updateLines","lineNumber","rows","undefined","lines","select","selectAll","data","text","d","substring","columns","parseInt","scale","parseFloat","lineIterator","fontHeight","lcdGroup","attr","x","y","rectChar","append","showBackground","background","Array","join","$watch","restrict","directive","window","AnalogGaugeDirective","updateGaugeAngle","value","minValue","angle","startAngle","maxValue","endAngle","deltaAngle","Math","abs","deltaValue","indicator","style","indicatorOriginX","indicatorOriginY","gaugeGroup","indicatorBoundingBox","node","getBBox","width","height","FourteenSegmentDisplayDirective","iterator","digits","template","SevenSegmentDisplayDirective"],"mappings":"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","file":"dasboard-ui.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui', ['ngRoute', 'dashboard-ui.directives']);\r\n}());\n(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui.directives', []);\r\n}());\n(function(d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AlphanumericLcdDirective() {\r\n        function link(scope, element, attrs) {\r\n            var rows = parseInt(scope.rows, 10) || 2,\r\n                columns = parseInt(scope.columns, 10) || 16,\r\n                scale = parseFloat(scope.scale, 10) || 1.0,\r\n                lineIterator = 0,\r\n                fontHeight = 18,\r\n                lcdGroup = d3.select(element[0]).attr('transform','translate('+attrs.x+', '+attrs.y+')'),\r\n                rectChar = '\\u0B8F';\r\n            function updateLines() {\r\n                var lineNumber = 0;\r\n                for (; lineNumber < rows; lineNumber += 1) {\r\n                    if (scope.lines[lineNumber] !== undefined) {\r\n                        d3.select(element[0]).selectAll('.foreground').data(scope.lines).text(function(d) {\r\n                            return d.substring(0, columns);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            for (; lineIterator < rows; lineIterator += 1) {\r\n                lcdGroup.append('text').attr('class', 'foreground').attr('x', 0).attr('y', fontHeight * (lineIterator + 1)).attr('transform', 'scale(' + scale + ')');\r\n                if(scope.showBackground === 'true') {\r\n                    var background = lcdGroup.append('text').attr('class', 'background').attr('x', 0).attr('y', fontHeight * (lineIterator + 1)).attr('transform', 'scale(' + scale + ')');\r\n                    background.data(rectChar).text(function(d) {\r\n                        return new Array(columns + 1).join(d);\r\n                    });\r\n                }\r\n            }\r\n            updateLines();\r\n            scope.$watch('lines', function() {\r\n                updateLines();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                rows: '@',\r\n                columns: '@',\r\n                scale: '@',\r\n                showBackground: '@',\r\n                lines: '='\r\n            }\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('alphanumericLcd', AlphanumericLcdDirective);\r\n}(window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AnalogGaugeDirective() {\r\n        function link(scope, element, attrs) {\r\n            var startAngle = parseInt(scope.startAngle, 10),\r\n                maxValue = parseInt(scope.maxValue, 10),\r\n                endAngle = parseInt(scope.endAngle, 10) || (startAngle * -1),\r\n                minValue = parseInt(scope.minValue, 10) || 0,\r\n                gaugeGroup = d3.select(element[0]),\r\n                indicator = gaugeGroup.select('#indicator'),\r\n                indicatorBoundingBox = indicator.node().getBBox(),\r\n                indicatorOriginX = scope.indicatorOriginX || (indicatorBoundingBox.x + (indicatorBoundingBox.width / 2)),\r\n                indicatorOriginY = scope.indicatorOriginY || (indicatorBoundingBox.y + (indicatorBoundingBox.height / 2)),\r\n                angle,\r\n                deltaAngle = 0,\r\n                deltaValue = maxValue - minValue;\r\n\r\n            function updateGaugeAngle() {\r\n                var value = parseInt(scope.value, 10);\r\n                if (value < minValue) {\r\n                    angle = startAngle;\r\n                } else if (value > maxValue) {\r\n                    angle = endAngle;\r\n                } else {\r\n                    deltaAngle = Math.abs(endAngle - startAngle);\r\n                    if (startAngle < endAngle) {\r\n                        //clockwise\r\n                        angle = startAngle + Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    } else {\r\n                        //counter clockwise\r\n                        angle = startAngle - Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    }\r\n                    indicator.style('transform-origin', indicatorOriginX + 'px ' + indicatorOriginY + 'px');\r\n                    indicator.style('transform', 'rotate(' + angle + 'deg)');\r\n                }\r\n            }\r\n            gaugeGroup.attr('transform', 'translate(' + attrs.x + ',' + attrs.y + ')');\r\n            scope.$watch('value', function () {\r\n                updateGaugeAngle();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                value: '@',\r\n                startAngle: '@',\r\n                endAngle: '@',\r\n                maxValue: '@',\r\n                minValue: '@',\r\n                indicatorOriginX: '@',\r\n                indicatorOriginY: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('analogGauge', AnalogGaugeDirective);\r\n}(window.d3));\n(function () {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function FourteenSegmentDisplayDirective() {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                value = scope.value,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '';\r\n            if (background) {\r\n                scope.background = '~';\r\n                for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                    scope.background += '.~';\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            template: '<text class=\"digits\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" fill=\"black\" opacity=\"0.1\">{{background}}</text><text class=\"digits\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" writing-mode=\"rl\">{{value}}</text>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('fourteenSegmentDisplay', FourteenSegmentDisplayDirective);\r\n}());\n(function () {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function SevenSegmentDisplayDirective() {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                value = scope.value,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '';\r\n            if (background) {\r\n                scope.background = '8';\r\n                for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                    scope.background += '.8';\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'E',\r\n            template: '<span class=\"background\">{{background}}</span><span class=\"foreground\">{{value}}</span>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('sevenSegmentDisplay', SevenSegmentDisplayDirective);\r\n}());"],"sourceRoot":"/source/"}