{"version":3,"sources":["dasboard-ui.min.js"],"names":["angular","module","SvgUtilsFactory","transformAttr","transformOriginAttr","translateString","x","y","scaleString","scale","rotateString","angle","transformOriginString","indicatorOriginX","indicatorOriginY","factory","d3","AlphanumericLcdDirective","svgUtils","link","scope","element","attrs","updateLines","lineNumber","rows","undefined","lines","select","selectAll","FOREGROUND_CLASS","data","text","d","substring","columns","lineIterator","RECTANGLE_CHAR","BACKGROUND_CLASS","parseInt","parseFloat","fontHeight","lcdGroup","attr","append","showBackground","arr","length","join","$watch","restrict","$inject","directive","window","FourteenSegmentDisplayDirective","iterator","digits","background","opacity","width","node","getBBox","template","value","SevenSegmentDisplayDirective","AnalogGaugeDirective","updateGaugeAngle","minValue","startAngle","maxValue","endAngle","deltaAngle","Math","abs","deltaValue","indicator","style","gaugeGroup","indicatorBoundingBox","height","BarMeterDirective","EASING_DURATION","EASING","bar","vertical","originalX","originalY","maxPosition","minPosition","stepWidth","barLength","transition","duration","ease"],"mappings":"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","file":"dasboard-ui.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui', ['ngRoute', 'dashboard-ui.directives']);\r\n} ());\n(function () {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.commons', []);\r\n} ());\n(function () {\r\n\t'use strict';\r\n\t/*global angular*/\r\n\r\n\tfunction SvgUtilsFactory() {\r\n\t\treturn {\r\n\t\t\ttransformAttr: 'transform',\r\n\t\t\ttransformOriginAttr: 'transform-origin',\r\n\t\t\ttranslateString: function (x, y) {\r\n                return 'translate(' + x + ', ' + y + ')';\r\n            },\r\n            scaleString: function (scale) {\r\n                return 'scale(' + scale + ')';\r\n            },\r\n\t\t\trotateString: function (angle) {\r\n\t\t\t\treturn 'rotate(' + angle + 'deg)';\r\n\t\t\t},\r\n\t\t\ttransformOriginString: function (indicatorOriginX, indicatorOriginY) {\r\n\t\t\t\treturn indicatorOriginX + 'px ' + indicatorOriginY + 'px';\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.commons')\r\n\t\t.factory('svgUtils', SvgUtilsFactory);\r\n} ());\n(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui.directives', ['dashboard-ui.commons']);\r\n} ());\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AlphanumericLcdDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var RECTANGLE_CHAR = '\\u0B8F',\r\n                FOREGROUND_CLASS = 'foreground',\r\n                BACKGROUND_CLASS = 'background',\r\n                rows = parseInt(scope.rows, 10) || 2,\r\n                columns = parseInt(scope.columns, 10) || 16,\r\n                scale = parseFloat(scope.scale, 10) || 1.0,\r\n                lineIterator,\r\n                fontHeight = 18,\r\n                lcdGroup = d3.select(element[0]).attr(svgUtils.transformAttr, svgUtils.translateString(attrs.x, attrs.y));\r\n            function updateLines() {\r\n                var lineNumber;\r\n                for (lineNumber = 0; lineNumber < rows; lineNumber += 1) {\r\n                    if (scope.lines[lineNumber] !== undefined) {\r\n                        d3.select(element[0]).selectAll('.' + FOREGROUND_CLASS).data(scope.lines).text(function (d) {\r\n                            return d.substring(0, columns);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            for (lineIterator = 0; lineIterator < rows; lineIterator += 1) {\r\n                lcdGroup.append('text').attr('class', FOREGROUND_CLASS).attr('x', 0).attr('y', fontHeight * (lineIterator + 1)).attr(svgUtils.transformAttr, svgUtils.scaleString(scale));\r\n                if (scope.showBackground === 'true') {\r\n                    lcdGroup.append('text').attr('class', BACKGROUND_CLASS).attr('x', 0).attr('y', fontHeight * (lineIterator + 1)).attr(svgUtils.transformAttr, svgUtils.scaleString(scale)).data(RECTANGLE_CHAR).text(function (d) {\r\n                        var arr = [];\r\n                        arr.length = columns + 1;\r\n                        return arr.join(d);\r\n                    });\r\n                }\r\n            }\r\n            updateLines();\r\n            scope.$watch('lines', function () {\r\n                updateLines();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                rows: '@',\r\n                columns: '@',\r\n                scale: '@',\r\n                showBackground: '@',\r\n                lines: '='\r\n            }\r\n        };\r\n    }\r\n\r\n    AlphanumericLcdDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('alphanumericLcd', AlphanumericLcdDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function FourteenSegmentDisplayDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '~';\r\n            scope.opacity = 0.0;\r\n            for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                scope.background += '.~';\r\n            }\r\n            if (background) {\r\n                scope.opacity = 0.1;\r\n            }\r\n            scope.$watch('value', function () {\r\n                var width = d3.select(element[0]).select('text#background').node().getBBox().width;\r\n                d3.select(element[0]).select('text#value').attr(svgUtils.transformAttr, svgUtils.translateString(width, 0));\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            template: '<text id=\"background\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" fill=\"black\" opacity=\"{{opacity}}\">{{background}}</text><text id=\"value\" dominant-baseline=\"text-before-edge\" writing-mode=\"lr\">{{value}}</text>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    FourteenSegmentDisplayDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('fourteenSegmentDisplay', FourteenSegmentDisplayDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function SevenSegmentDisplayDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '8';\r\n            scope.opacity = 0.0;\r\n            for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                scope.background += '.8';\r\n            }\r\n            if (background) {\r\n                scope.opacity = 0.1;\r\n            }\r\n            scope.$watch('value', function () {\r\n                var width = d3.select(element[0]).select('text#background').node().getBBox().width;\r\n                d3.select(element[0]).select('text#value').attr(svgUtils.transformAttr, svgUtils.translateString(width, 0));\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            template: '<text id=\"background\" text-anchor=\"end\" dominant-baseline=\"text-before-edge\" fill=\"black\" opacity=\"{{opacity}}\">{{background}}</text><text id=\"value\" dominant-baseline=\"text-before-edge\" writing-mode=\"lr\">{{value}}</text>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    SevenSegmentDisplayDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('sevenSegmentDisplay', SevenSegmentDisplayDirective);\r\n} (window.d3));\n(function (d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AnalogGaugeDirective(svgUtils) {\r\n        function link(scope, element, attrs) {\r\n            var startAngle = parseInt(scope.startAngle, 10),\r\n                maxValue = parseInt(scope.maxValue, 10),\r\n                endAngle = parseInt(scope.endAngle, 10) || (startAngle * -1),\r\n                minValue = parseInt(scope.minValue, 10) || 0,\r\n                gaugeGroup = d3.select(element[0]),\r\n                indicator = gaugeGroup.select('#indicator'),\r\n                indicatorBoundingBox = indicator.node().getBBox(),\r\n                indicatorOriginX = scope.indicatorOriginX || (indicatorBoundingBox.x + (indicatorBoundingBox.width / 2)),\r\n                indicatorOriginY = scope.indicatorOriginY || (indicatorBoundingBox.y + (indicatorBoundingBox.height / 2)),\r\n                angle,\r\n                deltaAngle = 0,\r\n                deltaValue = maxValue - minValue;\r\n\r\n            function updateGaugeAngle() {\r\n                var value = parseInt(scope.value, 10);\r\n                if (value < minValue) {\r\n                    angle = startAngle;\r\n                } else if (value > maxValue) {\r\n                    angle = endAngle;\r\n                } else {\r\n                    deltaAngle = Math.abs(endAngle - startAngle);\r\n                    if (startAngle < endAngle) {\r\n                        //clockwise\r\n                        angle = startAngle + Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    } else {\r\n                        //counter clockwise\r\n                        angle = startAngle - Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    }\r\n                    indicator.style(svgUtils.transformOriginAttr, svgUtils.transformOriginString(indicatorOriginX, indicatorOriginY));\r\n                    indicator.style(svgUtils.transformAttr, svgUtils.rotateString(angle));\r\n                }\r\n            }\r\n            gaugeGroup.attr(svgUtils.transformAttr, svgUtils.translateString(attrs.x, attrs.y));\r\n            scope.$watch('value', function () {\r\n                updateGaugeAngle();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'C',\r\n            scope: {\r\n                value: '@',\r\n                startAngle: '@',\r\n                endAngle: '@',\r\n                maxValue: '@',\r\n                minValue: '@',\r\n                indicatorOriginX: '@',\r\n                indicatorOriginY: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    AnalogGaugeDirective.$inject = ['svgUtils'];\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('analogGauge', AnalogGaugeDirective);\r\n} (window.d3));\n(function (d3) {\r\n\t'use strict';\r\n\t/*global angular, console*/\r\n\r\n\tfunction BarMeterDirective() {\r\n\t\tfunction link(scope, element, attrs) {\r\n\t\t\tvar EASING_DURATION = 250,\r\n\t\t\t\tEASING = 'linear',\r\n\t\t\t\tbar = d3.select(element[0]).select('#bar'),\r\n\t\t\t\tvertical = (scope.vertical === 'true') || false,\r\n\t\t\t\toriginalX = parseInt(bar.attr('x'), 10),\r\n\t\t\t\toriginalY = parseInt(bar.attr('y'), 10),\r\n\t\t\t\tmaxPosition = parseInt(scope.maxPosition, 10),\r\n\t\t\t\tminPosition = parseInt(scope.minPosition, 10),\r\n\t\t\t\tminValue = parseInt(scope.minValue, 10),\r\n\t\t\t\tmaxValue = parseInt(scope.maxValue, 10),\r\n\t\t\t\tstepWidth = ((maxPosition - minPosition) / (maxValue - minValue));\r\n\t\t\tscope.$watch('value', function () {\r\n\t\t\t\tvar value = parseInt(scope.value, 10),\r\n\t\t\t\t\tbarLength = Math.abs(stepWidth * value),\r\n\t\t\t\t\tx,\r\n                    y,\r\n                    height,\r\n                    width;\r\n\t\t\t\tif (vertical) {\r\n\t\t\t\t\tif (value >= 0 && value <= maxValue) {\r\n\t\t\t\t\t\ty = originalY - barLength;\r\n\t\t\t\t\t\theight = barLength;\r\n\t\t\t\t\t} else if (value < 0 && value >= minValue) {\r\n\t\t\t\t\t\ty = originalY;\r\n\t\t\t\t\t\theight = barLength;\r\n\t\t\t\t\t} else if (value > maxValue) {\r\n\t\t\t\t\t\ty = maxPosition;\r\n\t\t\t\t\t\theight = stepWidth * maxValue;\r\n\t\t\t\t\t} else if (value < minValue) {\r\n\t\t\t\t\t\ty = originalY;\r\n\t\t\t\t\t\theight = stepWidth * minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbar.transition().duration(EASING_DURATION).ease(EASING).attr('y', y).attr('height', Math.abs(height));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (value >= 0 && value <= maxValue) {\r\n\t\t\t\t\t\tx = originalX;\r\n\t\t\t\t\t\twidth = barLength;\r\n\t\t\t\t\t} else if (value < 0 && value >= minValue) {\r\n\t\t\t\t\t\tx = originalX - barLength;\r\n\t\t\t\t\t\twidth = barLength;\r\n\t\t\t\t\t} else if (value > maxValue) {\r\n\t\t\t\t\t\tx = originalX;\r\n\t\t\t\t\t\twidth = stepWidth * maxValue;\r\n\t\t\t\t\t} else if (value < minValue) {\r\n\t\t\t\t\t\tx = minPosition;\r\n\t\t\t\t\t\twidth = stepWidth * minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbar.transition().duration(EASING_DURATION).ease(EASING).attr('x', x).attr('width', Math.abs(width));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tlink: link,\r\n\t\t\trestrict: 'C',\r\n\t\t\tscope: {\r\n\t\t\t\tminValue: '@',\r\n\t\t\t\tmaxValue: '@',\r\n\t\t\t\tminPosition: '@',\r\n\t\t\t\tmaxPosition: '@',\r\n\t\t\t\tvalue: '@',\r\n\t\t\t\tvertical: '@'\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tangular\r\n\t\t.module('dashboard-ui.directives')\r\n\t\t.directive('barMeter', BarMeterDirective);\r\n} (window.d3));"],"sourceRoot":"/source/"}