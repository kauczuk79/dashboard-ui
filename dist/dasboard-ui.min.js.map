{"version":3,"sources":["dasboard-ui.min.js"],"names":["angular","module","d3","AlphanumericLcdDirective","link","scope","element","attrs","updateLines","lineNumber","rows","undefined","lines","select","selectAll","data","text","d","substring","columns","parseInt","scale","parseFloat","lineIterator","fontWidth","fontHeight","width","height","svg","append","attr","rectChar","showBackground","background","Array","join","$watch","restrict","directive","window","AnalogGaugeDirective","updateGaugeAngle","value","minValue","angle","startAngle","maxValue","endAngle","deltaAngle","Math","abs","deltaValue","indicator","style","indicatorOriginX","indicatorOriginY","indicatorBoundingBox","node","getBBox","x","y","FourteenSegmentDisplayDirective","iterator","digits","template","SevenSegmentDisplayDirective"],"mappings":"CAAC,WACG,YAGAA,SAAQC,OAAO,gBAAiB,UAAW,+BAE9C,WACG,YAGAD,SAAQC,OAAO,iCAElB,SAASC,GACN,YAGA,SAASC,KACL,QAASC,GAAKC,EAAOC,EAASC,GAY1B,QAASC,KAEL,IADA,GAAIC,GAAa,EACGC,EAAbD,EAAmBA,GAAc,EACJE,SAA5BN,EAAMO,MAAMH,IACZP,EAAGW,OAAOP,EAAQ,IAAIQ,UAAU,eAAeC,KAAKV,EAAMO,OAAOI,KAAK,SAASC,GAC3E,MAAOA,GAAEC,UAAU,EAAGC,KAKtC,IArBA,GAAIT,GAAOU,SAASf,EAAMK,KAAM,KAAO,EACnCS,EAAUC,SAASf,EAAMc,QAAS,KAAO,GACzCE,EAAQC,WAAWjB,EAAMgB,MAAO,KAAO,EACvCE,EAAe,EACfC,EAAY,GACZC,EAAa,GACbC,EAAQP,EAAUK,EAAYH,EAC9BM,EAASjB,EAAOe,EAAaJ,EAC7BO,EAAM1B,EAAGW,OAAOP,EAAQ,IAAIuB,OAAO,OAAOC,KAAK,QAASJ,GAAOI,KAAK,SAAUH,GAC9EI,EAAW,IAYOrB,EAAfa,EAAqBA,GAAgB,EAExC,GADAK,EAAIC,OAAO,QAAQC,KAAK,QAAS,cAAcA,KAAK,IAAK,GAAGA,KAAK,IAAKL,GAAcF,EAAe,IAAIO,KAAK,YAAa,SAAWT,EAAQ,KAChH,SAAzBd,EAAMyB,eAA2B,CAChC,GAAIC,GAAaL,EAAIC,OAAO,QAAQC,KAAK,QAAS,cAAcA,KAAK,IAAK,GAAGA,KAAK,IAAKL,GAAcF,EAAe,IAAIO,KAAK,YAAa,SAAWT,EAAQ,IAC7JY,GAAWlB,KAAKgB,GAAUf,KAAK,SAASC,GACpC,MAAO,IAAIiB,OAAMf,EAAU,GAAGgB,KAAKlB,KAI/CT,IACAH,EAAM+B,OAAO,QAAS,WAClB5B,MACD,GAGP,OACIJ,KAAMA,EACNiC,SAAU,KACVhC,OACIK,KAAM,IACNS,QAAS,IACTE,MAAO,IACPY,WAAY,IACZrB,MAAO,MAKnBZ,QACKC,OAAO,2BACPqC,UAAU,kBAAmBnC,IACpCoC,OAAOrC,IACR,SAASA,GACN,YAGA,SAASsC,KACL,QAASpC,GAAKC,EAAOC,EAASC,GAa1B,QAASkC,KACL,GAAIC,GAAQtB,SAASf,EAAMqC,MAAO,GACtBC,GAARD,EACAE,EAAQC,EACDH,EAAQI,EACfF,EAAQG,GAERC,EAAaC,KAAKC,IAAIH,EAAWF,GAG7BD,EAFaG,EAAbF,EAEQA,EAAaI,KAAKC,IAAKF,EAAaG,GAAeR,EAAWD,IAG9DG,EAAaI,KAAKC,IAAKF,EAAaG,GAAeR,EAAWD,IAE1EU,EAAUC,MAAM,mBAAoBC,EAAmB,MAAQC,EAAmB,MAClFH,EAAUC,MAAM,YAAa,UAAYT,EAAQ,SA5BzD,GAQIA,GARAC,EAAazB,SAASf,EAAMwC,WAAY,IACxCC,EAAW1B,SAASf,EAAMyC,SAAU,IACpCC,EAAW3B,SAASf,EAAM0C,SAAU,KAAqB,GAAbF,EAC5CF,EAAWvB,SAASf,EAAMsC,SAAU,KAAO,EAC3CS,EAAYlD,EAAGW,OAAOP,EAAQ,IAAIO,OAAO,cACzC2C,EAAuBJ,EAAUK,OAAOC,UACxCJ,EAAmBjD,EAAMiD,kBAAqBE,EAAqBG,EAAKH,EAAqB9B,MAAQ,EACrG6B,EAAmBlD,EAAMkD,kBAAqBC,EAAqBI,EAAKJ,EAAqB7B,OAAS,EAEtGqB,EAAa,EACbG,EAAaL,EAAWH,CAsB5BtC,GAAM+B,OAAO,QAAS,WAClBK,MACD,GAGP,OACIrC,KAAMA,EACNiC,SAAU,IACVhC,OACIqC,MAAO,IACPG,WAAY,IACZE,SAAU,IACVD,SAAU,IACVH,SAAU,IACVW,iBAAkB,IAClBC,iBAAkB,MAK9BvD,QACKC,OAAO,2BACPqC,UAAU,cAAeE,IAChCD,OAAOrC,IACR,WACG,YAGA,SAAS2D,KACL,QAASzD,GAAKC,EAAOC,EAASC,GAC1B,GAGIuD,GAHAC,EAAS1D,EAAM0D,OAEf9B,GADQ5B,EAAMqC,MACyB,SAAzBnC,EAAMyB,eAGxB,IADA3B,EAAM4B,WAAa,GACfA,EAEA,IADA5B,EAAM4B,WAAa,IACd6B,EAAW,EAAcC,EAAS,EAApBD,EAAuBA,GAAY,EAClDzD,EAAM4B,YAAc,KAKhC,OACI7B,KAAMA,EACNiC,SAAU,IACV2B,SAAU,0FACV3D,OACI0D,OAAQ,IACRrB,MAAO,MAKnB1C,QACKC,OAAO,2BACPqC,UAAU,yBAA0BuB,MAE5C,WACG,YAGA,SAASI,KACL,QAAS7D,GAAKC,EAAOC,EAASC,GAC1B,GAGIuD,GAHAC,EAAS1D,EAAM0D,OAEf9B,GADQ5B,EAAMqC,MACyB,SAAzBnC,EAAMyB,eAGxB,IADA3B,EAAM4B,WAAa,GACfA,EAEA,IADA5B,EAAM4B,WAAa,IACd6B,EAAW,EAAcC,EAAS,EAApBD,EAAuBA,GAAY,EAClDzD,EAAM4B,YAAc,KAKhC,OACI7B,KAAMA,EACNiC,SAAU,IACV2B,SAAU,0FACV3D,OACI0D,OAAQ,IACRrB,MAAO,MAKnB1C,QACKC,OAAO,2BACPqC,UAAU,sBAAuB2B","file":"dasboard-ui.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui', ['ngRoute', 'dashboard-ui.directives']);\r\n}());\n(function () {\r\n    'use strict';\r\n    /*global angular*/\r\n\r\n    angular.module('dashboard-ui.directives', []);\r\n}());\n(function(d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AlphanumericLcdDirective() {\r\n        function link(scope, element, attrs) {\r\n            var rows = parseInt(scope.rows, 10) || 2,\r\n                columns = parseInt(scope.columns, 10) || 16,\r\n                scale = parseFloat(scope.scale, 10) || 1.0,\r\n                lineIterator = 0,\r\n                fontWidth = 12,\r\n                fontHeight = 18,\r\n                width = columns * fontWidth * scale,\r\n                height = rows * fontHeight * scale,\r\n                svg = d3.select(element[0]).append('svg').attr('width', width).attr('height', height),\r\n                rectChar = '\\u0B8F';\r\n\r\n            function updateLines() {\r\n                var lineNumber = 0;\r\n                for (; lineNumber < rows; lineNumber += 1) {\r\n                    if (scope.lines[lineNumber] !== undefined) {\r\n                        d3.select(element[0]).selectAll('.foreground').data(scope.lines).text(function(d) {\r\n                            return d.substring(0, columns);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            for (; lineIterator < rows; lineIterator += 1) {\r\n                svg.append('text').attr('class', 'foreground').attr(\"x\", 0).attr(\"y\", fontHeight * (lineIterator + 1)).attr('transform', 'scale(' + scale + ')');\r\n                if(attrs.showBackground === \"true\") {\r\n                    var background = svg.append('text').attr('class', 'background').attr(\"x\", 0).attr(\"y\", fontHeight * (lineIterator + 1)).attr('transform', 'scale(' + scale + ')');\r\n                    background.data(rectChar).text(function(d) {\r\n                        return new Array(columns + 1).join(d);\r\n                    });\r\n                }\r\n            }\r\n            updateLines();\r\n            scope.$watch('lines', function() {\r\n                updateLines();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'AE',\r\n            scope: {\r\n                rows: '@',\r\n                columns: '@',\r\n                scale: '@',\r\n                background: '@',\r\n                lines: '='\r\n            }\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('alphanumericLcd', AlphanumericLcdDirective);\r\n}(window.d3));\n(function(d3) {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function AnalogGaugeDirective() {\r\n        function link(scope, element, attrs) {\r\n            var startAngle = parseInt(scope.startAngle, 10),\r\n                maxValue = parseInt(scope.maxValue, 10),\r\n                endAngle = parseInt(scope.endAngle, 10) || (startAngle * -1),\r\n                minValue = parseInt(scope.minValue, 10) || 0,\r\n                indicator = d3.select(element[0]).select('#indicator'),\r\n                indicatorBoundingBox = indicator.node().getBBox(),\r\n                indicatorOriginX = scope.indicatorOriginX || (indicatorBoundingBox.x + (indicatorBoundingBox.width / 2)),\r\n                indicatorOriginY = scope.indicatorOriginY || (indicatorBoundingBox.y + (indicatorBoundingBox.height / 2)),\r\n                angle,\r\n                deltaAngle = 0,\r\n                deltaValue = maxValue - minValue;\r\n\r\n            function updateGaugeAngle() {\r\n                var value = parseInt(scope.value, 10);\r\n                if (value < minValue) {\r\n                    angle = startAngle;\r\n                } else if (value > maxValue) {\r\n                    angle = endAngle;\r\n                } else {\r\n                    deltaAngle = Math.abs(endAngle - startAngle);\r\n                    if (startAngle < endAngle) {\r\n                        //clockwise\r\n                        angle = startAngle + Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    } else {\r\n                        //counter clockwise\r\n                        angle = startAngle - Math.abs((deltaAngle / deltaValue) * (minValue - value));\r\n                    }\r\n                    indicator.style('transform-origin', indicatorOriginX + 'px ' + indicatorOriginY + 'px');\r\n                    indicator.style('transform', 'rotate(' + angle + 'deg)');\r\n                }\r\n            }\r\n\r\n            scope.$watch('value', function() {\r\n                updateGaugeAngle();\r\n            }, true);\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'E',\r\n            scope: {\r\n                value: '@',\r\n                startAngle: '@',\r\n                endAngle: '@',\r\n                maxValue: '@',\r\n                minValue: '@',\r\n                indicatorOriginX: '@',\r\n                indicatorOriginY: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('analogGauge', AnalogGaugeDirective);\r\n}(window.d3));\n(function () {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function FourteenSegmentDisplayDirective() {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                value = scope.value,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '';\r\n            if (background) {\r\n                scope.background = '~';\r\n                for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                    scope.background += '.~';\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'E',\r\n            template: '<span class=\"background\">{{background}}</span><span class=\"foreground\">{{value}}</span>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('fourteenSegmentDisplay', FourteenSegmentDisplayDirective);\r\n}());\n(function () {\r\n    'use strict';\r\n    /*global angular, console*/\r\n\r\n    function SevenSegmentDisplayDirective() {\r\n        function link(scope, element, attrs) {\r\n            var digits = scope.digits,\r\n                value = scope.value,\r\n                background = (attrs.showBackground === \"true\"),\r\n                iterator;\r\n            scope.background = '';\r\n            if (background) {\r\n                scope.background = '8';\r\n                for (iterator = 0; iterator < digits - 1; iterator += 1) {\r\n                    scope.background += '.8';\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            link: link,\r\n            restrict: 'E',\r\n            template: '<span class=\"background\">{{background}}</span><span class=\"foreground\">{{value}}</span>',\r\n            scope: {\r\n                digits: '@',\r\n                value: '@'\r\n            }\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module('dashboard-ui.directives')\r\n        .directive('sevenSegmentDisplay', SevenSegmentDisplayDirective);\r\n}());"],"sourceRoot":"/source/"}